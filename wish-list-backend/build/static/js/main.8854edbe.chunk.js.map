{"version":3,"sources":["api/services/wishes.js","utils/error_handlers/user_error_handler.js","api/services/users.js","utils/error_handlers/login_error_handler.js","api/services/login.js","components/app/App.js","index.js","utils/logger.js"],"names":["baseUrl","BackendWish","wisher","axios","get","newObject","post","id","put","delete","logger","require","userErrorHandler","error","message","response","data","keyword","window","alert","BackendUser","then","catch","exception","BackendLogin","userInfo","bcryptjs","generatePassword","WishForm","props","onSubmit","addWish","className","value","descriptionHolder","onChange","descriptionHandler","urlHolder","urlHandler","type","RegisterForm","loginFormAction","usernameHolder","usernameHandler","passwordHolder","passwordHandler","inviteHolder","inviteHandler","placeholder","LoginForm","createUser","username","password","role","linkedUsers","style","invitePass","wish","dbID","key","Display","text","FormatRow","functionality","buttonname","hoverFunction","loggedUser","buttonElement","taken","taker","onClick","onMouseOver","description","href","url","target","LogOutButton","setUser","localStorage","clear","ToAdminButton","setWisher","editTitleButton","editable","toggleAndSave","App","illegalRegex","useState","setUsername","charEvent","search","setPassword","setInvite","loginView","setLoginView","registerFormSubmission","event","a","preventDefault","length","title","adminSecret","newUser","inviteAsList","split","wisherId","compare","generate","logUser","setToken","useEffect","userJSON","getItem","tokenJSON","JSON","parse","loginFormSubmission","inputUser","user","token","setItem","stringify","setUserAsWisher","userid","editTitle","setEdit","document","querySelector","innerText","updated","wishes","setWishes","delWish","newWishes","filter","users","setUsers","delUser","newUsers","setDescription","setUrl","formSubmitHandler","dbId","createWish","concat","console","log","take","map","displayText","setDisplay","timeoutId","setTimeoutId","clearTimeout","setTimeout","path","to","showWishes","UserRow","Object","keys","toWisher","toSanta","Instructions","element","invite","generateInvite","WishCreator","contentEditable","ReactDOM","render","getElementById","module","exports","info"],"mappings":"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","file":"static/js/main.8854edbe.chunk.js","sourcesContent":["/* eslint import/prefer-default-export: 0 */\r\nimport axios from 'axios';\r\n\r\nlet baseUrl = '/api/wishes';\r\nif (process.env.NODE_ENV === 'development') {\r\n  baseUrl = 'http://localhost:3003/api/wishes';\r\n}\r\n\r\n// send wisher (maybe different than user) as request to backend\r\nconst getForWisher = (wisher) => axios.get(`${baseUrl}/${wisher}`);\r\n\r\nconst create = (newObject) => axios.post(baseUrl, newObject);\r\n\r\nconst update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject);\r\n\r\nconst remove = (id) => axios.delete(`${baseUrl}/${id}`);\r\n\r\n// package backend methods and export\r\nconst BackendWish = {\r\n  getForWisher, create, update, remove,\r\n};\r\nexport { BackendWish };\r\n","const logger = require('../logger');\r\n\r\nexport default function userErrorHandler(error) {\r\n  logger.error('following error occured', error.message);\r\n  // logger.error('FRONT response.data is', error.response.data);\r\n\r\n  if (error.response.data.keyword === 'username') {\r\n    window.alert('Username not unique');\r\n  }\r\n\r\n  if (error.response.data.keyword === 'invite') {\r\n    window.alert('Invalid invite');\r\n  }\r\n}\r\n","/* eslint import/prefer-default-export: 0 */\r\nimport axios from 'axios';\r\nimport userErrorHandler from '../../utils/error_handlers/user_error_handler';\r\n\r\nlet baseUrl = '/api/users';\r\nif (process.env.NODE_ENV === 'development') {\r\n  baseUrl = `http://localhost:3003${baseUrl}`;\r\n}\r\n\r\nconst getAll = () => axios.get(baseUrl)\r\n  .then((response) => response.data);\r\n\r\nconst create = (newObject) => axios\r\n  .post(baseUrl, newObject)\r\n  .catch((exception) => {\r\n    // custom error handling\r\n    userErrorHandler(exception);\r\n  });\r\n\r\nconst update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject)\r\n  .then((response) => response.data);\r\n\r\nconst remove = (id) => axios.delete(`${baseUrl}/${id}`);\r\n\r\nconst getOne = (id) => axios.get(`${baseUrl}/${id}`)\r\n  .then((response) => response.data)\r\n  .catch((exception) => userErrorHandler(exception));\r\n\r\n// package backend methods and export\r\nconst BackendUser = {\r\n  getAll, create, update, remove, getOne,\r\n};\r\nexport { BackendUser };\r\n","const logger = require('../logger');\r\n\r\nexport default function loginErrorHandler(error) {\r\n  logger.error('following error occured', error.message);\r\n\r\n  if (error.response.data.keyword === 'admin') {\r\n    window.alert('Admin secret is incorrect');\r\n  }\r\n\r\n  if (error.response.data.keyword === 'password') {\r\n    window.alert('Incorrect username or password');\r\n  }\r\n}\r\n","/* eslint import/prefer-default-export: 0 */\r\nimport axios from 'axios';\r\nimport loginErrorHandler from '../../utils/error_handlers/login_error_handler';\r\n\r\nlet baseUrl = '/api/login';\r\nif (process.env.NODE_ENV === 'development') {\r\n  baseUrl = `http://localhost:3003${baseUrl}`;\r\n}\r\n\r\nconst requestToken = (userInfo) => axios\r\n  .post(baseUrl, userInfo)\r\n  .catch((exception) => loginErrorHandler(exception));\r\n\r\nconst BackendLogin = { requestToken };\r\nexport { BackendLogin };\r\n","/* eslint consistent-return:0 */\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport {\r\n  BrowserRouter, Switch, Route, Link, Redirect,\r\n} from 'react-router-dom';\r\nimport { BackendWish } from '../../api/services/wishes';\r\nimport { BackendUser } from '../../api/services/users';\r\nimport { BackendLogin } from '../../api/services/login';\r\nimport './App.css';\r\nimport 'jquery';\r\n\r\nconst bcryptjs = require('bcryptjs');\r\nconst generatePassword = require('generate-password');\r\n\r\n// --------------------------- form (visible: WISHER) -------------------------------------\r\nconst WishForm = (props) => <form onSubmit={props.addWish}>\r\n  <div>\r\n    <div>\r\n      <h2 className='other-title'>Add wish</h2>\r\n      description\r\n      <br />\r\n      <textarea\r\n        className='wish-description'\r\n        value={props.descriptionHolder}\r\n        onChange={props.descriptionHandler}\r\n      />\r\n    </div>\r\n    <div>\r\n      url<br />\r\n      <input\r\n        className='wish-url'\r\n        value={props.urlHolder}\r\n        onChange={props.urlHandler}\r\n      />\r\n    </div>\r\n  </div>\r\n  <div>\r\n    <button type='submit'>\r\n      Add\r\n    </button>\r\n  </div>\r\n</form>;\r\n// -------------------------------------------------------------------------------------------\r\n\r\n// registering form\r\nconst RegisterForm = (props) => <form onSubmit={props.loginFormAction}>\r\n  username:{'\\xa0'}\r\n  <input\r\n    value={props.usernameHolder}\r\n    onChange={props.usernameHandler}\r\n  />\r\n  <br />\r\n  password:{'\\xa0'}\r\n  <input\r\n    value={props.passwordHolder}\r\n    onChange={props.passwordHandler}\r\n  />\r\n  <br />\r\n  invite:{'\\xa0'}\r\n  <input\r\n    value={props.inviteHolder}\r\n    onChange={props.inviteHandler}\r\n    placeholder={'if wisher leave empty'}\r\n  />\r\n  <br />\r\n  <button type='submit'>\r\n    Submit\r\n  </button>\r\n</form>;\r\n\r\n// login form\r\nconst LoginForm = (props) => <form onSubmit={props.loginFormAction}>\r\n  username:{'\\xa0'}\r\n  <input\r\n    value={props.usernameHolder}\r\n    onChange={props.usernameHandler}\r\n  />\r\n  <br />\r\n  password:{'\\xa0'}\r\n  <input\r\n    value={props.passwordHolder}\r\n    onChange={props.passwordHandler}\r\n  />\r\n  <br />\r\n  <button type='submit'>\r\n    Submit\r\n  </button>\r\n</form>;\r\n\r\n// wish object creator, handles creation of new wishes and wishes from database query\r\nconst createWish = (description, url, taken, wisher, taker, dbId) => {\r\n  // use mongodb id for existing wishes, generate one for new; for DEV with dummy data only\r\n  // const id = dbId || Math.random();\r\n\r\n  // shorthand for name: name\r\n  const wish = {\r\n    key: dbId,\r\n    id: dbId,\r\n    description,\r\n    url,\r\n    taken,\r\n    wisher,\r\n    taker,\r\n  };\r\n\r\n  return wish;\r\n};\r\n\r\nconst createUser = (username, password, role, linkedUsers, style, invitePass, wish, dbID) => {\r\n  const user = {\r\n    key: dbID,\r\n    id: dbID,\r\n    username,\r\n    password,\r\n    role,\r\n    style,\r\n    linkedUsers,\r\n    invitePass,\r\n    wish,\r\n  };\r\n\r\n  return user;\r\n};\r\n\r\n// generate invite string for wisher that enables inviting Santa(s)\r\n// invite string is of form 'invitePasswordHash/wisher_dbID'\r\nconst generateInvite = (wisher) => {\r\n  const invite = `${wisher.invitePass}/${wisher.id}`;\r\n  window.alert(`Your invite is ${invite}`);\r\n};\r\n\r\n// --------------------------- table (visible: ALL) -------------------------------------------\r\n// display entire cell content, used in mouseover for long text items\r\nconst Display = (text) => <div className='display'>\r\n  {text.text}\r\n</div>;\r\n\r\n// formats wish item into data row, different formatting based on taken status\r\nconst FormatRow = (wish, functionality, buttonname, hoverFunction, loggedUser) => {\r\n  let buttonElement;\r\n  // dont give button for taken wishes with taker other than loggedin\r\n  if (!(wish.taken === 1 && wish.taker !== loggedUser.id)) {\r\n    buttonElement = <button onClick={() => functionality(wish.id)}>{buttonname}</button>;\r\n  }\r\n\r\n  return (\r\n  <tr className={(wish.taken === 1 && loggedUser.role !== 1) ? 'taken-row' : 'untaken-row'}>\r\n    <td onMouseOver={() => hoverFunction(wish.description)}>{wish.description}</td>\r\n    <td className='url'><a href={wish.url} target='_blank'>{wish.url}</a></td>\r\n    <td>{buttonElement}</td>\r\n  </tr>\r\n  );\r\n};\r\n// ----------------------------------------------------------------------------------------------\r\n\r\n// display user for admin view\r\nconst UserRow = (user, functionality, showWishes) => <tr className='untaken-row'>\r\n  <td>{user.username}</td>\r\n  <td><button onClick={() => functionality(user.id)}>delete</button></td>\r\n  {user.role === 1 ? <td><button onClick={() => showWishes(user.id)}>wishes</button></td> : null}\r\n</tr>;\r\n\r\n// logout\r\nconst LogOutButton = (setUser) => {\r\n  const logOut = () => {\r\n    // clear session credentials\r\n    window.localStorage.clear();\r\n    setUser({});\r\n  };\r\n\r\n  return <button onClick={() => logOut()}>Log out</button>;\r\n};\r\n\r\n// return to admin\r\nconst ToAdminButton = (setWisher) => {\r\n  // reset wisher and redirect\r\n  const resetWisher = () => {\r\n    setWisher({});\r\n    // not coming through\r\n    // return <Redirect to='../admin' />;\r\n  };\r\n\r\n  return <button onClick={() => resetWisher()}>Admin</button>;\r\n};\r\n\r\n// toggle title editing\r\nconst editTitleButton = (editable, toggleAndSave) => <button\r\n  onClick={() => toggleAndSave()}>\r\n  {editable ? 'save' : 'edit'}\r\n</button>;\r\n\r\nconst App = () => {\r\n  // for sanitising user input\r\n  const illegalRegex = /[^A-Za-z0-9/]/;\r\n  // -------------------------------------user creation & log in-----------------\r\n  // login/register form handling\r\n  const [usernameHolder, setUsername] = useState('');\r\n  const usernameHandler = (charEvent) => {\r\n    // sanitise by allowing only normal characters & numbers\r\n    if (charEvent.target.value.search(illegalRegex) >= 0) {\r\n      window.alert('Input contains illegal symbols. Only characters and numbers allowed.');\r\n    } else {\r\n      setUsername(charEvent.target.value);\r\n    }\r\n  };\r\n\r\n  const [passwordHolder, setPassword] = useState('');\r\n  const passwordHandler = (charEvent) => {\r\n    // sanitise by allowing only normal characters & numbers\r\n    if (charEvent.target.value.search(illegalRegex) >= 0) {\r\n      window.alert('Input contains illegal symbols. Only characters, numbers, and slashes allowed.');\r\n    } else {\r\n      setPassword(charEvent.target.value);\r\n    }\r\n  };\r\n\r\n  const [inviteHolder, setInvite] = useState('');\r\n  const inviteHandler = (charEvent) => {\r\n    // sanitise by allowing only normal characters & numbers\r\n    if (charEvent.target.value.search(illegalRegex) >= 0) {\r\n      window.alert('Input contains illegal symbols. Only characters and numbers allowed.');\r\n    } else {\r\n      setInvite(charEvent.target.value);\r\n    }\r\n  };\r\n\r\n  // switch for changing between login and register, default login\r\n  const [loginView, setLoginView] = useState(1);\r\n\r\n  // registration form submit\r\n  const registerFormSubmission = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // check correct password/username length\r\n    if (passwordHolder.length < 1 || usernameHolder.length < 1) {\r\n      window.alert('Please, provide username and password');\r\n      return;\r\n    }\r\n\r\n    let newUser;\r\n    // json object specifying style elements, only for wisher\r\n    const style = {\r\n      title: 'Christmas Wish List',\r\n    };\r\n\r\n    // parse wisher from invite string\r\n    // invite string is of form 'invitePasswordHash/wisher_dbID\r\n    if (inviteHolder) {\r\n      // admin creation\r\n      if (usernameHolder === 'admin') {\r\n        // verify creation through password api\r\n        if (await BackendLogin.requestToken({ adminSecret: inviteHolder })) {\r\n          newUser = await BackendUser\r\n            .create(createUser(usernameHolder, passwordHolder, 0));\r\n          if (newUser) {\r\n            setLoginView(1);\r\n          }\r\n        } else {\r\n          window.alert('admin is not allowed as a username');\r\n        }\r\n        return;\r\n      }\r\n\r\n      // santa creation\r\n      let inviteAsList;\r\n      try {\r\n        inviteAsList = inviteHolder.split('/');\r\n      } catch (exception) {\r\n        window.alert('Invite not in correct format');\r\n        return; // exit\r\n      }\r\n\r\n      // check correct invite form\r\n      if (inviteAsList.length !== 2) {\r\n        window.alert('Invite not in correct format');\r\n        return; // exit\r\n      }\r\n\r\n      const wisherId = inviteAsList[1];\r\n      const wisher = await BackendUser.getOne(wisherId);\r\n\r\n      // check invite validity\r\n      if (wisher && bcryptjs.compare(inviteAsList[0], wisher.invitePass)) {\r\n        // format input into proper object, update backend, save received object\r\n        // invited user is always Santa linked to wisher, wish & inviteHash don't exist\r\n        newUser = await BackendUser\r\n          .create(createUser(usernameHolder, passwordHolder, 2, wisherId));\r\n      } else {\r\n        window.alert('error: invalid invite');\r\n      }\r\n    } else {\r\n      // no invite string input --> generate wisher\r\n      const invitePass = generatePassword.generate();\r\n      newUser = await BackendUser\r\n        .create(createUser(usernameHolder, passwordHolder, 1, null, style, invitePass));\r\n    }\r\n\r\n    // redirect after successful registering\r\n    if (newUser) {\r\n      // redirect to login after registering\r\n      setLoginView(1);\r\n      // window.location = '../login';\r\n    }\r\n  };\r\n\r\n  // logged in user\r\n  const [loggedUser, logUser] = useState({});\r\n  const [token, setToken] = useState(''); /* eslint no-unused-vars:0 */\r\n\r\n  // log user in using session\r\n  useEffect(() => {\r\n    const userJSON = window.localStorage.getItem('user');\r\n    const tokenJSON = window.localStorage.getItem('token');\r\n    if (userJSON) {\r\n      logUser(JSON.parse(userJSON));\r\n      setToken(JSON.parse(tokenJSON));\r\n    }\r\n  }, []);\r\n\r\n  // login form submit\r\n  const loginFormSubmission = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // format input into proper object\r\n    const inputUser = {\r\n      username: usernameHolder,\r\n      password: passwordHolder,\r\n    };\r\n\r\n    // send to login backend, receive user and token if valid\r\n    const response = await BackendLogin.requestToken(inputUser);\r\n    if (response) {\r\n      logUser(response.data.user);\r\n      setToken(response.data.token);\r\n      // remember session\r\n      window.localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      window.localStorage.setItem('token', JSON.stringify(response.data.user));\r\n\r\n      // clear form\r\n      setUsername(''); setPassword('');\r\n    }\r\n  };\r\n\r\n  // wisher for showing relevant wishes\r\n  const [wisher, setWisher] = useState({});\r\n\r\n  // set the given user as wisher,\r\n  // needed for cases where wisher is not the user logged in\r\n  const setUserAsWisher = async (userid) => setWisher(await BackendUser.getOne(userid));\r\n\r\n  // load wisher information from server\r\n  useEffect(() => {\r\n    // logged in user is wisher\r\n    if (loggedUser.role === 1) {\r\n      setWisher(loggedUser);\r\n    } else if (loggedUser.role === 2) {\r\n      // logged in user is Santa\r\n      setUserAsWisher(loggedUser.linkedUsers);\r\n    }\r\n  }, [loggedUser]); // run effect after login\r\n\r\n  // toggle title editing\r\n  const [editTitle, setEdit] = useState(false);\r\n\r\n  // toggle editability and save after edit\r\n  const toggleAndSave = async () => {\r\n    // save only if title has been editable\r\n    if (editTitle) {\r\n      const title = document.querySelector('.main-title').innerText;\r\n      const updated = wisher;\r\n      updated.style.title = title;\r\n      setWisher(await BackendUser.update(wisher.id, updated));\r\n    }\r\n\r\n    setEdit(!editTitle);\r\n  };\r\n\r\n  // ----------------------------------------------WISHES---------------------------\r\n  // state hook\r\n  const [wishes, setWishes] = useState([]);\r\n\r\n  // event hook for loading data from server\r\n  useEffect(async () => {\r\n    // fetch wishes only if wisher exists\r\n    if (wisher && wisher.username && wisher.username.length > 0) {\r\n      const response = await BackendWish\r\n        .getForWisher(wisher.id); // get only wishes of the wisher\r\n      // .then((response) => setWishes(response)); // save the response of the promise\r\n      setWishes(response.data);\r\n    }\r\n  }, [wisher]); // run effect as wisher changed, i.e. after login\r\n\r\n  // ------------------------------- WISHER -----------------------------\r\n  // event handler for deleting wish from front- and backend\r\n  const delWish = (id) => {\r\n    // frontend\r\n    const newWishes = wishes.filter((wish) => wish.id !== id);\r\n    setWishes(newWishes);\r\n    // backend\r\n    BackendWish.remove(id);\r\n  };\r\n\r\n  // ----------------------------- ADMIN view\r\n  const [users, setUsers] = useState([]);\r\n\r\n  useEffect(async () => {\r\n    // fetch users only for admin\r\n    if (loggedUser.role === 0) {\r\n      setUsers(await BackendUser.getAll());\r\n    }\r\n  }, [loggedUser]);\r\n\r\n  // event handler for deleting user\r\n  const delUser = (id) => {\r\n    // frontend\r\n    const newUsers = users.filter((user) => user.id !== id);\r\n    setUsers(newUsers);\r\n    // backend\r\n    BackendUser.remove(id);\r\n  };\r\n\r\n  // state hooks and input event handlers for wish form input\r\n  // name\r\n  // const [nameHolder, setName] = useState('');\r\n  // const nameHandler = (charEvent) => setName(charEvent.target.value);\r\n  // description\r\n  const [descriptionHolder, setDescription] = useState('');\r\n  const descriptionHandler = (charEvent) => setDescription(charEvent.target.value);\r\n  // url\r\n  const [urlHolder, setUrl] = useState('');\r\n  const urlHandler = (charEvent) => setUrl(charEvent.target.value);\r\n\r\n  // form submission handling\r\n  const formSubmitHandler = (event) => {\r\n    // prevent default form submission\r\n    event.preventDefault();\r\n\r\n    // format input into proper object, update backend\r\n    BackendWish\r\n      .create(createWish(descriptionHolder, urlHolder, 0, wisher.id))\r\n      // concat returned object to wishes, return object has id given by the db\r\n      .then((response) => setWishes(wishes.concat(response.data)));\r\n\r\n    console.log('latest wish not for console?', wishes);\r\n    // reset input fields\r\n    setDescription(''); setUrl('');\r\n  };\r\n\r\n  // ---------------------------- Santa Claus ---------------------\r\n  // event handler for changing taken status\r\n  const take = (id) => {\r\n    const taker = (wish) => {\r\n      // user can only take untaken and untake her own\r\n      if (wish.id === id && (wish.taken === 0 || wish.taker === loggedUser.id)) {\r\n        // flip taken status indicator\r\n        wish.taken = 1 - wish.taken;\r\n        // reset taker for taken, insert for untaken\r\n        wish.taker = (wish.taker) ? null : loggedUser.id;\r\n        BackendWish.update(id, wish); // backend\r\n      }\r\n      return (wish);\r\n    };\r\n\r\n    setWishes(wishes.map((wish) => taker(wish)));\r\n  };\r\n\r\n  // display text for long text items\r\n  const [displayText, setDisplay] = useState('');\r\n\r\n  // timeout id state hook for cancelling display removal\r\n  const [timeoutId, setTimeoutId] = useState('');\r\n\r\n  const hoverFunction = (text) => {\r\n    // clear last timeout if one exists to display properly\r\n    clearTimeout(timeoutId);\r\n    setDisplay(text);\r\n    // remove text after timeout, enable cancelling this action\r\n    setTimeoutId(setTimeout(() => setDisplay(''), 10000));\r\n  };\r\n\r\n  // login page conditionally redirects already logged users based on their role\r\n  const LoginPage = () => {\r\n    // if user loggedin redirect\r\n    if (loggedUser.username && loggedUser.username.length > 0) {\r\n      // wisher\r\n      if (loggedUser.role === 1) {\r\n        return <Redirect to='../wisher' />;\r\n      }\r\n      // santa\r\n      if (loggedUser.role === 2) {\r\n        return <Redirect to='../' />;\r\n      }\r\n      // admin\r\n      if (loggedUser.role === 0) {\r\n        return <Redirect to='../admin' />;\r\n      }\r\n    } else {\r\n      return <div>\r\n        <button onClick={() => setLoginView(0)}>Register</button>\r\n        <h2 className='other-title'>Login</h2>\r\n        <LoginForm\r\n          loginFormAction={loginFormSubmission}\r\n          usernameHolder={usernameHolder}\r\n          usernameHandler={usernameHandler}\r\n          passwordHolder={passwordHolder}\r\n          passwordHandler={passwordHandler}\r\n        />\r\n        <aside className='instructions'>\r\n          This is the log in page. To create a new user, please,\r\n          navigate to the registration page on the top left corner.\r\n        </aside>\r\n      </div>;\r\n    }\r\n  };\r\n\r\n  const RegisterPage = () => <div>\r\n    <button onClick={() => setLoginView(1)}>Login</button>\r\n    <h2 className='other-title'>Register</h2>\r\n    <RegisterForm\r\n      loginFormAction={registerFormSubmission}\r\n      usernameHolder={usernameHolder}\r\n      usernameHandler={usernameHandler}\r\n      passwordHolder={passwordHolder}\r\n      passwordHandler={passwordHandler}\r\n      inviteHolder={inviteHolder}\r\n      inviteHandler={inviteHandler}\r\n    />\r\n    <aside className='instructions'>Here you can register. There are two kinds of users;\r\n    the ones making the wishes (1) and the ones fulfilling them (2). Let's call them types 1 and 2,\r\n    respectively. The creation of a type 2 user requires an invite from a type 1 user.\r\n    If no invite is provided, a user of type 1 is created. </aside>\r\n  </div>;\r\n\r\n  // functional component returning wish form\r\n  const WishCreator = () => {\r\n    // // redirect unlogged users\r\n    // if (!loggedUser.username || loggedUser.username.length < 1) {\r\n    //   return <Redirect to='../login' />;\r\n    // }\r\n\r\n    // // redirect santa\r\n    // if (loggedUser.role === 2) {\r\n    //   return <Redirect to='../' />;\r\n    // }\r\n\r\n    // // redirect admin\r\n    // if (loggedUser.role === 0 && !wisher) {\r\n    //   console.log('wisher redirects to admin for wisher', wisher);\r\n    //   return <Redirect to='../admin' />;\r\n    // }\r\n\r\n    const element = <div>\r\n      <h2 className='other-title'>Generate invite link</h2>\r\n      <button onClick={() => generateInvite(loggedUser)}>Invite</button>\r\n      <WishForm\r\n        addWish={formSubmitHandler}\r\n        descriptionHandler={descriptionHandler}\r\n        descriptionHolder={descriptionHolder}\r\n        urlHandler={urlHandler}\r\n        urlHolder={urlHolder}\r\n      />\r\n    </div>;\r\n\r\n    return loggedUser.role === 1 ? element : null;\r\n  };\r\n\r\n  const Redirects = () => {\r\n    // redirect unlogged users\r\n    if (!loggedUser.username || loggedUser.username.length < 1) {\r\n      return <Redirect to='../login' />;\r\n    }\r\n\r\n    // return admin to correct page after button pressed\r\n    if (loggedUser.role === 0 && Object.keys(wisher).length === 0) {\r\n      return <Redirect to='../admin' />;\r\n    }\r\n  };\r\n\r\n  const AdminPage = () => {\r\n    // redirect unlogged users\r\n    if (!loggedUser.username || loggedUser.username.length < 1) {\r\n      return <Redirect to='../login' />;\r\n    }\r\n\r\n    // redirect santa\r\n    if (loggedUser.role === 2) {\r\n      return <Redirect to='../' />;\r\n    }\r\n\r\n    // redirect wisher\r\n    if (loggedUser.role === 1) {\r\n      return <Redirect to='../wisher' />;\r\n    }\r\n\r\n    // redirect admin to see wishes after wisher set\r\n    if (wisher && wisher.username) {\r\n      return <Redirect to='../' />;\r\n    }\r\n\r\n    const page = <div>\r\n      {LogOutButton(logUser)}\r\n      <table className='the-table'>\r\n        <thead>\r\n          <tr>\r\n            <th>User</th>\r\n            <th>Delete</th>\r\n            <th>Wishes</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {users.map((user) => UserRow(user, delUser, setUserAsWisher))}\r\n        </tbody>\r\n      </table>\r\n    </div>;\r\n\r\n    // users grouped by wisher\r\n    return page;\r\n  };\r\n\r\n  const MainTitle = () => <h1>\r\n    <span\r\n      className='main-title'\r\n      contentEditable={editTitle}\r\n    >\r\n      {wisher.style.title}\r\n    </span>\r\n    {loggedUser.role === 1 ? editTitleButton(editTitle, toggleAndSave) : null}\r\n  </h1>;\r\n\r\n  const Instructions = () => {\r\n    const toWisher = <aside className='instructions'>\r\n      \"Generate invite link\" creates the invite needed to add type 2 users.\r\n      To add a user, send her the invite and instruct to provide it at registration.\r\n       Please, note that all users use the same invite. <br />\r\n      The form enables adding wishes. All users created using the invite\r\n      will be able to see the table below but not modify the wishes. They can claim wishes but\r\n       you won't be shown what is claimed. Also, don't worry about descriptions being too lengthy.\r\n       They are displayed in full to your type 2 users. Note that you can customise the table header\r\n       that is displayed to your type 2 users.\r\n    </aside>;\r\n\r\n    const toSanta = <aside className='instructions'>\r\n      Use the buttons to indicate the wishes you wish to fulfill. Don't worry,\r\n      this information is not visible to the wisher.\r\n      You can hover over lenghty descriptions to display them in full.\r\n    </aside>;\r\n\r\n    if (loggedUser.role === 1) {\r\n      return toWisher;\r\n    }\r\n\r\n    if (loggedUser.role === 2) {\r\n      return toSanta;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BrowserRouter>\r\n\r\n        <Switch>\r\n          <Route path='/admin'>\r\n            {AdminPage()}\r\n          </Route>\r\n          <Route path='/login'>\r\n            {loginView === 1 ? LoginPage() : RegisterPage()}\r\n          </Route>\r\n          <Route path='/'>\r\n            {Redirects()}\r\n            {LogOutButton(logUser)}\r\n            {Instructions()}\r\n            {WishCreator()}\r\n            {loggedUser.role === 0 ? ToAdminButton(setWisher) : null}\r\n            {Object.keys(wisher).length > 0 ? MainTitle() : null}\r\n            <table className='the-table'>\r\n              <thead>\r\n                <tr>\r\n                  <th>Wish</th>\r\n                  <th>URL</th>\r\n                  <th>Function</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <Switch>\r\n                  <Route path='/wisher'>\r\n                    {wishes.map((wish) => FormatRow(wish, delWish, 'delete', hoverFunction, loggedUser))}\r\n                  </Route>\r\n                  <Route path='/'>\r\n                    {wishes.map((wish) => FormatRow(wish, take, (wish.taken === 0) ? 'take' : 'untake', hoverFunction, loggedUser))}\r\n                  </Route>\r\n                </Switch>\r\n              </tbody>\r\n            </table>\r\n            <Switch>\r\n              <Route path='/'>\r\n                <Display text={displayText}></Display>\r\n              </Route>\r\n            </Switch>\r\n          </Route>\r\n        </Switch>\r\n\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// TITLE: starting point for the app\r\n\r\nimport ReactDOM from 'react-dom';\r\n// import React from 'react';\r\n// import { render } from '@testing-library/react'\r\nimport App from './components/app/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// TITLE: middleware for logging\r\n\r\nconst info = (...params) => {\r\n  console.log(...params);\r\n};\r\n\r\nconst error = (...params) => {\r\n  console.error(...params);\r\n};\r\n\r\nmodule.exports = {\r\n  info, error,\r\n};\r\n"],"sourceRoot":""}