{"version":3,"sources":["api/services/wishes.js","components/app/App.js","index.js"],"names":["baseUrl","BackendWish","axios","get","then","response","data","newObject","post","id","put","delete","WishForm","props","onSubmit","addWish","className","value","nameHolder","onChange","nameHandler","descriptionHolder","descriptionHandler","urlHolder","urlHandler","type","Display","text","FormatRow","wish","functionality","buttonname","hoverFunction","taken","name","onMouseOver","description","href","url","target","onClick","App","useState","wishes","setWishes","useEffect","console","log","delWish","newWishes","filter","setName","setDescription","setUrl","take","map","taker","displayText","setDisplay","timeoutId","setTimeoutId","clearTimeout","setTimeout","path","event","dbId","preventDefault","key","concat","charEvent","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85ffe0aa.chunk.js","sourcesContent":["/* eslint import/prefer-default-export: 0 */\r\nimport axios from 'axios';\r\n\r\nconst baseUrl = 'http://localhost:3003/api/wishes/';\r\n\r\nconst getAll = () => axios.get(baseUrl)\r\n  .then((response) => response.data);\r\n\r\nconst create = (newObject) => axios.post(baseUrl, newObject);\r\n\r\nconst update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject);\r\n\r\nconst remove = (id) => axios.delete(`${baseUrl}/${id}`);\r\n\r\n// package backend methods and export\r\nconst BackendWish = {\r\n  getAll, create, update, remove,\r\n};\r\nexport { BackendWish };\r\n","// const BackendWish = require('../../api/services/wishes.js');\nimport { useEffect, useState } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { BackendWish } from '../../api/services/wishes';\nimport './App.css';\n\n// --------------------------- form (visible: WISHER) -------------------------------------\nconst WishForm = (props) => <form onSubmit={props.addWish}>\n  <div>\n    <h2 className='main-title'>Add wish</h2>\n    name:{'\\xa0'}\n    <input\n      value={props.nameHolder}\n      onChange={props.nameHandler}\n    />\n    <br/>\n    description:{'\\xa0'}\n    <input\n      value={props.descriptionHolder}\n      onChange={props.descriptionHandler}\n    />\n    <br/>\n    url:{'\\xa0'}\n    <input\n      value={props.urlHolder}\n      onChange={props.urlHandler}\n    />\n  </div>\n  <div>\n    <button type='submit'>\n      Add\n    </button>\n  </div>\n</form>;\n// -------------------------------------------------------------------------------------------\n\n// wish object creator, handles creation of new wishes and wishes from database query\nconst createWish = (name, description, url, taken, dbId) => {\n  // use mongodb id for existing wishes, generate one for new; for DEV with dummy data only\n  // const id = dbId || Math.random();\n\n  // shorthand for name: name\n  const wish = {\n    key: dbId,\n    id: dbId,\n    name,\n    description,\n    url,\n    taken,\n  };\n\n  return wish;\n};\n\n// --------------------------- table (visible: ALL) -------------------------------------------\n// display entire cell content, used in mouseover for long text items\nconst Display = (text) => <div className='display'>\n  {text.text}\n</div>;\n\n// formats wish item into data row, different formatting based on taken status\nconst FormatRow = (wish, functionality, buttonname, hoverFunction) => <tr className={(wish.taken === 1) ? 'taken-row' : 'untaken-row'}>\n  <td>{wish.name}</td>\n  <td onMouseOver={() => hoverFunction(wish.description)}>{wish.description}</td>\n  <td className='url'><a href={wish.url} target='_blank'>{wish.url}</a></td>\n  <td><button onClick={() => functionality(wish.id)}>{buttonname}</button></td>\n</tr>;\n// ----------------------------------------------------------------------------------------------\n\nconst App = () => {\n  // state hook\n  const [wishes, setWishes] = useState([]);\n\n  // event hook for loading data from server\n  useEffect(() => {\n    console.log('note: effect is run only after rendering');\n    BackendWish\n      .getAll()\n      .then((response) => setWishes(response)); // save the response of the promise\n  }, []); // [] means it's only done once\n\n  // ------------------------------- WISHER -----------------------------\n  // event handler for deleting wish from front- and backend\n  const delWish = (id) => {\n    // frontend\n    const newWishes = wishes.filter((wish) => wish.id !== id);\n    setWishes(newWishes);\n    // backend\n    BackendWish.remove(id);\n  };\n\n  // state hooks and input event handlers for form input\n  // name\n  const [nameHolder, setName] = useState('');\n  const nameHandler = (charEvent) => setName(charEvent.target.value);\n  // description\n  const [descriptionHolder, setDescription] = useState('');\n  const descriptionHandler = (charEvent) => setDescription(charEvent.target.value);\n  // url\n  const [urlHolder, setUrl] = useState('');\n  const urlHandler = (charEvent) => setUrl(charEvent.target.value);\n\n  // form submission handling\n  const formSubmitHandler = (event) => {\n    // prevent default form submission\n    event.preventDefault();\n\n    // format input into proper object, update backend\n    BackendWish\n      .create(createWish(nameHolder, descriptionHolder, urlHolder, 0))\n      // concat returned object to wishes, return object has id given by the db\n      .then((response) => setWishes(wishes.concat(response.data)));\n\n    console.log('latest wish not for console?', wishes);\n    // reset input fields\n    setName(''); setDescription(''); setUrl('');\n  };\n  // -----------------------------------------------------------------------------------\n\n  // ---------------------------- Santa Claus ---------------------\n  // event handler for changing taken status\n  const take = (id) => {\n    const taker = (wish) => {\n      if (wish.id === id) {\n        wish.taken = 1 - wish.taken; // flip taken status indicator\n        BackendWish.update(id, wish); // backend\n      }\n      return (wish);\n    };\n\n    setWishes(wishes.map((wish) => taker(wish)));\n  };\n\n  // display text for long text items\n  const [displayText, setDisplay] = useState('');\n\n  // timeout id state hook for cancelling display removal\n  const [timeoutId, setTimeoutId] = useState('');\n\n  const hoverFunction = (text) => {\n    // clear last timeout if one exists to display properly\n    clearTimeout(timeoutId);\n    setDisplay(text);\n    // remove text after timeout, enable cancelling this action\n    setTimeoutId(setTimeout(() => setDisplay(''), 10000));\n  };\n\n  return (\n    <BrowserRouter>\n      <div>\n        <Switch>\n          <Route path='/admin'>\n            <WishForm\n              addWish={formSubmitHandler}\n              nameHolder={nameHolder}\n              nameHandler={nameHandler}\n              descriptionHandler={descriptionHandler}\n              descriptionHolder={descriptionHolder}\n              urlHandler={urlHandler}\n              urlHolder={urlHolder}\n            />\n          </Route>\n        </Switch>\n        <h1 className='main-title'>Christmas wish list 2020</h1>\n        <table className='the-table'>\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Description</th>\n              <th>URL</th>\n              <th>Function</th>\n            </tr>\n          </thead>\n          <tbody>\n            <Switch>\n              <Route path='/admin'>\n                {wishes.map((wish) => FormatRow(wish, delWish, 'delete', setDisplay))}\n              </Route>\n              <Route path='/'>\n                {wishes.map((wish) => FormatRow(wish, take, (wish.taken === 0) ? 'take' : 'untake', hoverFunction))}\n              </Route>\n            </Switch>\n          </tbody>\n        </table>\n        <Switch>\n          <Route path='/admin'></Route>\n          <Route path='/'>\n            <Display text={displayText}></Display>\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","// TITLE: starting point for the app\n\nimport ReactDOM from 'react-dom';\nimport React from 'react';\n// import { render } from '@testing-library/react'\nimport App from './components/app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}